;Basic tests
(do
    (import test)
    (cls)
    
    ;basic bools
    (assert true "Ok, it's a start")
    (assert 1 "Truthiness 1")
    (assert '(1 2 3) "Truthiness 2")    
    (assert 'hello' "Truthiness 3")
    (assert-not false "Falsiness")
    (assert-not 0 "Falsiness 1")
    (assert-not nil "Falsiness 2")

    (assert-not '' "Falsiness 3")
    (assert-not () "Falsiness 4")

    ;let-scope
    (sod y 5)
    (undef x)
    (let (x 1 y 2) 
        (do
            (assert (= 1 $x) "let 1")
            (assert (= 2 (v y)) "let 2")
            (assert (= 5 (gv y)) "gv works in let")
            (assert (def? x) "let 3")
            (assert (= '~3~' `~{+ $x $y}~`) "let 4 interp")
            (let (y 123) (assert-eq 123 $y "nested let 1"))
            (assert-eq 2 $y "nested let 2")
    ))

    (assert-not (def? x) "let scope undef")
    (assert (def? y) "let scope hiding")
    (assert (= 5 $y) "let scope hiding 2")
    
    ([x 4 y 10] do
        (assert-eq $x 4 "auto-let")
        (assert-eq $y 10 "auto-let 2")
        (relet x 600)
        (assert-eq $x 600 "relet")
        (assert-fails ()->(relet bob 123) "Can't relet things that aren't let"))
        
    (assert-not (def? x) "autolet undef")
    (assert (def? y) "autolet hiding")
    (assert (= 5 $y) "autolet hiding 2")


    ;lists
    (sod l '(1 2 3 4 5 6 7 8 9 10))
    (assert (list? $l) "lists are lists")
    (assert-eq 2 (nth 2 $l) "nth works")
    (assert-eq '(3 4 5) (range 3 3 $l) "range works")
	(assert-eq '(4 5 6) (apply (=> v (+ $v 1)) (range 3 3 $l)) "map works")

	(sod l2 '())
    (assert-eq '(3 4 5) (map (=> v (do 
        (set l2 (concat $l2 (+ $v 1)))
        (+ $v 1))
    ) (range 3 3 $l)) "apply works")

    (assert-eq '(4 5 6) $l2 "apply worked 2")

    ;lambdas, object lamdbas and top-level lambdas (lol)
    (sod val 123)
    (sod o {name: 'dan', fn: (=> () (sod val 1))})
    (.sod o fn2 (=> (sod val 2)))
    (.sod o fn3 (x)->(sod val $x))
    
    (assert-eq $val 123 "object-lambdas step 1")
    (.call $o fn ())
    (assert-eq $val 1 "object-lambdas step 2")
    (.call $o fn2 ())
    (assert-eq $val 2 "object-lambdas step 3")
    (.call $o fn3 555)
    (assert-eq $val 555 "object-lambdas step 4")

    (sod val 123)
    (assert-eq o.name 'dan' "Auto-dotting basic test")
    (o.fn3 23)
    (assert-eq $val 23 "object-lambdas step 5")
    (o.fn2)
    (assert-eq $val 2 "object-lambdas step 6")
    (o.fn)
    (assert-eq $val 1 "object-lambdas step 7")

    (assert-eq 4 ((=> (a b) (+ $a $b)) 2 2) "Lambda at the root")
    
    ;exceptions
    (assert-throws (=> () (do (sod dingleberry 123) (throw 'fuck off'))) 'basic throw/catch')
    (assert (def? dingleberry) 'basic throw/catch 2')
    (assert-fails (=> () (do (sod dingleberry 666) (throw 'fuck off'))) 'try catches shiro exceptions')
    (assert (= $dingleberry 666) 'try catches shiro exceptions 2')
    
    (assert-fails (=> ((+ 1 2) (+ 3 4))) 'sibling paired list fails (and also try works)')
    
    (assert-eq 3 (catch (+ 1 1) 'blah blah' (+ 1 $result)) 'checking result variable in finally')

    ;objects and stuff
    (sod o {name: 'steve', say-hi: (=> (`Hi {this.name}`)), with-parm: (=> s (`{$s}{this.name}`))})
    (assert-eq 'Hi steve' o.say-hi 'this in object lambdas 1')
    (assert-eq '1steve' (o.with-parm 1) 'this in object lambdas 3')
    (.sod o name 'dan')
    (assert-eq 'Hi dan' (.c $o say-hi ()) 'this in object lambdas 2')
    (assert-eq 'blehdan' (.c $o with-parm 'bleh') 'this in object lambdas 4')
    
    (sod loser (enclose {_p: 1} {getP: (=> (this._p)), incP: (=> (.sod this _p (+ this._p 1)))}))
    (assert-fails (=> (print loser._p)) "enclosures hide reads")
    (assert-fails (=> (sod loser _p 100)) "enclosures prevent writing")
    (assert-eq 1 loser.getP "can set and get enclosed variables in appropriate lambdas 1")
    (loser.incP)
    (assert-eq 2 loser.getP "can set and get enclosed variables in appropriate lambdas 2")
    (loser.incP)
    (assert-eq 3 loser.getP "can set and get enclosed variables in appropriate lambdas 3")
    
    ;implementers and mixins
    (impl IDoStuff { s:'string', n:123, f: (=> (s:str?) `{$s}-{$s}`)})
    (sod ids (mixin IDoStuff { f2: (=> n (+ $n 1))}))
    (sod notids { s:'string', n:123, f: (=> (s) `{$s}-{$s}`)})
    (sod notids2 { s:'string', n:123, f: (=> (s:num?) `{$s}-{$s}`)})
    (assert (IDoStuff? $ids) "autopredicate for implementer")
    (assert (impl? $ids IDoStuff) "impl? also works")
    (assert-not (IDoStuff? $notids) "quack helper considering predicates 1")
    (assert-not (IDoStuff? $notids2) "quack helper considering predicates 2")
    (assert-fails (=> (ids.f 123)) "param-predicats for lambdas")
    (assert-works (=> (ids.f "Hello nurse")) "param-predicates for lambdas 2")
    (assert-eq 2 (ids.f2 1) "mixins are mixing in")

    ;bug-fix test cases
    (assert-works (=> (sod o {say-hi: (=> (print "hello nurse"))})) "double-quotes in inline object bug")
    (assert-works (=> (do
        (sod x2 123)    ; (1 2 3))
    )) "parentheses in comments confuses the reader bug")
    (assert-works (=> (sod o {say-hi: (=> (print "hello nu))rse"))})) "parenthesis in string in reader bug")
    (assert-works (=> (sod o {say-hi: (=> (print 'hello nu))rse'))})) "parenthesis in string in reader bug 2")
    (assert-works (=> (sod o {say-hi: (=> (print `hello nu))rse {+ 2 2}`))})) "parenthesis in string in reader bug 3")

    ;insanity
    (do (await res (do 
        (sub "Dan" (sod finished true))
        (sod finished false)
        (while (! $finished) (nop))
        "Let's just return something"
        ))
     
        (assert (awaiting? res) "awaiting? works")
        (while (! (queue? "Dan")) (nop))
        (pub "Dan" 123)
        (assert-eq "Let's just return something" $res "Interrim assert.  If we sit here forever life sucks")
        (assert (! (awaiting? res)) "We can shut shit down, and awaiting? works 2")        
    )
    
    (do
        (awaith x (throw "fuck off"))
        (awaith y ((+ 2 2) (+ 3 4)))
        (assert (error? $x) "async error handling 1")
        (assert (error? $y) "async error handling 2")
        (assert-eq "fuck off" x.message "ShiroException unwrapping in async error handling")
    )
    
    (sod l '())
    (defn add-l (i) (sod l (concat $l $i)))
    (do 
        (sub "Odd" (add-l $val))
        (add-l 1)
        (pub "Odd" 2)
        (atom (do (add-l 3) (pub "Odd" 4) (add-l 5))))
        
    (assert-eq '(1 2 3 5 4) $l "atomic lists are atomic")    

    ;check reader shortcuts
    (assert-read-fail ' (=> ("dan"->(print "dan")))' "arrow must have param list")
    (assert-read-fail ' (=> (()->123))' "arrow must have command list")

    (print 'Test run complete'))