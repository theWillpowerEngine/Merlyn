(do
    (cls)
    (defn assert (test s) (pnb (if (! $test) (str "FAIL: " $s "%n") "")))
    (defn assert-not (test s) (pnb (if $test (str "FAIL: " $s "%n") "")))
    (defn assert-eq (t1 t2 s) (pnb (if (!= $t1 $t2) `FAIL ({$t1} != {$t2}): {$s}"%n` "")))
    
    ;basic bools
    (assert true "Ok, it's a start")
    (assert 1 "Truthiness 1")
    (assert '(1 2 3) "Truthiness 2")    
    (assert 'hello' "Truthiness 3")
    (assert-not false "Falsiness")
    (assert-not 0 "Falsiness 1")
    (assert-not nil "Falsiness 2")
    (assert-not '' "Falsiness 3")
    (assert-not () "Falsiness 4")

    ;let-scope
    (sod y 5)
    (let (x 1 y 2) 
        (do
            (assert (= 1 $x) "let 1")
            (assert (= 2 (v y)) "let 2")
            (assert (def? x) "let 3")
            (assert (= '~3~' `~{+ $x $y}~`) "let 4 interp")
    ))

    (assert-not (def? x) "let scope undef")
    (assert (def? y) "let scope hiding")
    (assert (= 5 $y) "let scope hiding 2")

    ;lists
    (sod l '(1 2 3 4 5 6 7 8 9 10))
    (assert (list? $l) "lists are lists")
    (assert-eq 2 (nth 2 $l) "nth works")
    (assert-eq '(3 4 5) (range 3 3 $l) "range works")
	(assert-eq '(4 5 6) (map (=> v (+ $v 1)) (range 3 3 $l)) "map works")

	(sod l2 '())
    (assert-eq '(3 4 5) (apply (=> v (do 
        (set l2 (concat $l2 (+ $v 1)))
        (+ $v 1))
    ) (range 3 3 $l)) "apply works")

    (assert-eq '(4 5 6) $l2 "apply worked 2")

    ;lambdas, object lamdbas and top-level lambdas (lol)
    (sod val 123)
    (sod o {name: 'dan', fn: (=> () (sod val 1))})
    (.sod o fn2 (=> () (sod val 2)))
    (.sod o fn3 (=> (x) (sod val $x)))
    
    (assert-eq $val 123 "object-lambdas step 1")
    (.call $o fn ())
    (assert-eq $val 1 "object-lambdas step 2")
    (.call $o fn2 ())
    (assert-eq $val 2 "object-lambdas step 3")
    (.call $o fn3 555)
    (assert-eq $val 555 "object-lambdas step 4")

    (sod val 123)
    (assert-eq o.name 'dan' "Auto-dotting basic test")
    (o.fn3 23)
    (assert-eq $val 23 "object-lambdas step 5")
    (o.fn2)
    (assert-eq $val 2 "object-lambdas step 6")
    (o.fn)
    (assert-eq $val 1 "object-lambdas step 7")

    (assert-eq 4 ((=> (a b) (+ $a $b)) 2 2) "Lambda at the root")

    (print 'Test run complete'))