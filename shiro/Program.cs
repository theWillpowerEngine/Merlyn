using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Reflection;
using Shiro;
using Shiro.Build;

namespace Shiro.Cons
{
    class Options
    {
        public bool Interpreting = false;
        public bool Compiling = false;
        public bool ShowResult = false;
        public string EXEName;
        public string EntryModule = "main";
        public string[] Files;

        public bool HasFiles => Files.Length > 0;
    }

    class Program
    {
        public static bool KeepREPLing = true;
        public static Options Options = new Options();

        private static void SetOptionsFromCmdLine(string[] args)
        {
            if (args.Length == 0)
                return;

            var files = new List<string>();
            var start = 1;
            string path = "";
            switch (args[0])
            {
                case "install":
                    path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\libs\\" + args[1];
                    
                    if (Directory.Exists(path))
                    {
                        foreach (var file in Directory.GetFiles(path))
                            File.Copy(file, Path.Combine(Directory.GetCurrentDirectory(), Path.GetFileName(file)));

                        Console.WriteLine("Installed built-in library: " + args[1]);
                    } else
                    {
                        Console.WriteLine("Couldn't find library to install: " + args[1]);
                    }
                    KeepREPLing = false;
                    break;

                case "uninstall":
                    path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\libs\\" + args[1];

                    if (Directory.Exists(path))
                    {
                        foreach (var file in Directory.GetFiles(path))
                            if (File.Exists(Path.Combine(Directory.GetCurrentDirectory(), Path.GetFileName(file))))
                                File.Delete(Path.Combine(Directory.GetCurrentDirectory(), Path.GetFileName(file)));

                        Console.WriteLine("Uninstalled built-in library: " + args[1]);
                    }
                    else
                    {
                        Console.WriteLine("Couldn't find library to uninstall: " + args[1]);
                    }
                    KeepREPLing = false;
                    break;

                case "compile":
                    Options.Compiling = true;
                    Options.EXEName = null;
                    break;

                case "run":
                    Options.Interpreting = true;
                    break;

                case "help":
                    Console.WriteLine("  shiro <command> [<args>] [<files>]");
                    Console.WriteLine("    Commands:  compile, run, install, uninstall, help");
                    Console.WriteLine("    args:");
                    Console.WriteLine("      -sr - Show result of evaluation (applies to REPL)");
                    Console.WriteLine("      -output:file - Set the name of the EXE generated by the compiler");
                    Console.WriteLine("      -start:name - Set the name of the first shiro file that will be run");
                    KeepREPLing = false;
                    break;

                default:
                    start -= 1;
                    break;

            }
            
            for(var i=start; i<args.Length; i++)
            {
                var arg = args[i];
                if(arg[0] == '-')
                {
                    var eles = arg.Split(':');
                    switch(eles[0].ToLower())
                    {
                        case "-sr":
                            Options.ShowResult = true;
                            break;
                        case "-output":
                        case "-out":
                            if (!Options.Compiling)
                                Console.WriteLine("-output CLA only works when compiling.  We'll ignore it.");
                            else
                                Options.EXEName = eles[1];
                            break;
                        case "-start":
                            Options.EntryModule = eles[1];
                            break;
                    }
                } 
                else
                {
                    if (arg.EndsWith(".shr"))
                        files.Add(arg);
                    else
                        files.Add(arg + ".shr");
                }
            }

            Options.Files = files.ToArray();
        }

        static void Main(string[] args)
        {
            SetOptionsFromCmdLine(args);

            if (!Options.Compiling)
            {
                var shiro = new Interpreter();

                if (!Options.Interpreting)
                {
                    //Welcome to the REPL
                    if (KeepREPLing)
                    {
                        Console.WriteLine("    shiro is running in interactive, REPL mode.  If you want to do other things try 'merp -help'");
                        Console.WriteLine("    Shiro interpreter version: " + Interpreter.Version);
                        Console.WriteLine("        (double-tap Enter to run buffered code)");
                        Console.WriteLine("        Built-In Functions:  cls, input, exit");
                        Console.WriteLine();
                    }

                    Interpreter.Output = s =>
                    {
                        Console.Write(s);
                    };

                    shiro.RegisterAutoFunction("cls", (i, t) =>
                    {
                        Console.Clear();
                        return Token.Nil;
                    });
                    shiro.RegisterAutoFunction("input", (i, t) =>
                    {
                        return new Token(Console.ReadLine());
                    });
                    shiro.RegisterAutoFunction("exit", (i, t) =>
                    {
                        KeepREPLing = false;
                        return Token.Nil;
                    });

                    var code = "";
                    while (KeepREPLing)
                    {
                        if (string.IsNullOrEmpty(code))
                            Console.Write(":>  ");
                        else
                            Console.Write("    ");

                        var line = Console.ReadLine();
                        if (line != "")
                            code += line + Environment.NewLine;
                        else
                        {
                            try
                            {
                                var ret = shiro.Eval(code);
                                if (Options.ShowResult)
                                    Console.WriteLine("[result] " + ret.ToString());
                                Console.WriteLine();

                            }
                            catch (ApplicationException aex)
                            {
                                Console.WriteLine("[error] " + aex.Message);
                                Console.WriteLine();
                            }
                            finally
                            {
                                code = "";
                            }
                        }
                    }
                }
                else
                {
                    //Interpret files
                    var modules = new Dictionary<string, string>();
                    Interpreter.LoadModule = (m, s) => {
                        if (modules.ContainsKey(s.ToLower()))
                        {
                            shiro.Eval(modules[s.ToLower()]);
                            return true;
                        }

                        return Interpreter.DefaultModuleLoader(m, s);
                    };

                    foreach (var f in Options.Files)
                    {
                        var name = f.Split('.')[0].ToLower();
                        var code = File.ReadAllText(f);

                        modules.Add(name, code);
                    }

                    if(!modules.ContainsKey(Options.EntryModule.ToLower()))
                    {
                        Console.WriteLine("Entry point " + Options.EntryModule + " was not found.  Nothing to execute.");
                        return;
                    }
                    try
                    {
                        var res = shiro.Eval(modules[Options.EntryModule.ToLower()]);
                        if (Options.ShowResult)
                            Console.WriteLine("[result] " + res.ToString());
                    }
                    catch (ApplicationException aex)
                    {
                        Console.WriteLine("[error] " + aex.Message);
                        Console.WriteLine();
                    }
                }
            }
            else
            {
                //Compile time
                var c = new Compiler(Options.EntryModule);
                bool hadMain = false;
                foreach(var f in Options.Files)
                {
                    var name = f.Split('.')[0];
                    c.AddShiroModule(name, File.ReadAllText(f));

                    if (name == Options.EntryModule)
                        hadMain = true;
                }

                if (!hadMain)
                {
                    Console.WriteLine("Expected entry point for compiled application (" + Options.EntryModule + ") wasn't found.");
                }
                else
                {
                    if (Options.EXEName == null)
                        Options.EXEName = Options.EntryModule + ".exe";
                    
                    var path = Directory.GetCurrentDirectory();

                    AssemblyName[] a = Assembly.GetExecutingAssembly().GetReferencedAssemblies();
                    foreach (AssemblyName an in a)
                        if (an.FullName.ToLower().Contains("shiro"))
                        {
                            if (File.Exists(path + "\\Shiro.Lang.dll"))
                                File.Delete(path + "\\Shiro.Lang.dll");

                            var shiroPath = new FileInfo(Assembly.GetExecutingAssembly().Location).DirectoryName;
                            File.Copy(shiroPath + "\\Shiro.Lang.dll", path + "\\Shiro.Lang.dll");
                        }

                    System.CodeDom.Compiler.CompilerError ce;
                    c.Compile(Options.EXEName, path, out ce);

                    if (ce == null)
                        Console.WriteLine("Compile success");
                    else
                    {
                        Console.WriteLine("Compile failed: " + ce.ErrorText + "; press enter to continue");
                        Console.ReadLine();
                    }
                }
            }
        }
    }
}
